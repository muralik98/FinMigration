{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "finmignspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "66f0c4bf-cae2-4096-9ea1-9706382fe30b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/74afba3d-c219-44b6-aef3-8b2f57c0dd9f/resourceGroups/finmigration/providers/Microsoft.Synapse/workspaces/finmigrationsynapse/bigDataPools/finmignspark",
				"name": "finmignspark",
				"type": "Spark",
				"endpoint": "https://finmigrationsynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/finmignspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"spark.conf.set(\"spark.databricks.delta.schema.autoMerge.enabled\", \"true\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import dbutils \r\n",
					"output_base_path = \"abfss://fintech@datalabsfintechmigration.dfs.core.windows.net/silver/\"\r\n",
					"\r\n",
					"try:\r\n",
					"    files = dbutils.fs.ls(output_base_path)\r\n",
					"    print(\"Path exists!\")\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Path does not exist or is not accessible: {e}\")\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"\r\n",
					"# Initialize SparkSession (if not already initialized)\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"\r\n",
					"# Define your ADLS Gen2 path\r\n",
					"output_base_path = \"abfss://fintech@datalabsfintechmigration.dfs.core.windows.net/silver/\"\r\n",
					"\r\n",
					"# Get the Hadoop FileSystem API\r\n",
					"fs = spark._jvm.org.apache.hadoop.fs.FileSystem\r\n",
					"hadoop_conf = spark._jsc.hadoopConfiguration()\r\n",
					"path = spark._jvm.org.apache.hadoop.fs.Path(output_base_path)\r\n",
					"\r\n",
					"# Check if the path exists\r\n",
					"if fs.get(hadoop_conf).exists(path):\r\n",
					"    print(\"✅ Path exists!\")\r\n",
					"else:\r\n",
					"    print(\"❌ Path does not exist.\")\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			}
		]
	}
}