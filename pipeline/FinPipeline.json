{
	"name": "FinPipeline",
	"properties": {
		"activities": [
			{
				"name": "GetTableList",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT \n    TABLE_SCHEMA AS SchemaName,\n    TABLE_NAME AS TableName\nFROM \n    INFORMATION_SCHEMA.TABLES\nWHERE \n    TABLE_TYPE = 'BASE TABLE' and TABLE_SCHEMA = 'fin'\nORDER BY \n    SchemaName, TableName;",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetTableList",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetTableList').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Copy data1",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@{concat('SELECT * FROM ', item().SchemaName, '.', item().TableName)}",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "AzureSqlTable1",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "Parquet1",
									"type": "DatasetReference",
									"parameters": {
										"tablename": {
											"value": "@item().TableName",
											"type": "Expression"
										},
										"schemaname": {
											"value": "@item().SchemaName",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "BronzeSilverNB",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "ForEach1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "Bronze_To_Silver",
						"type": "NotebookReference"
					},
					"snapshot": true,
					"sparkPool": {
						"referenceName": "finmignspark",
						"type": "BigDataPoolReference"
					},
					"executorSize": "Small",
					"conf": {
						"spark.dynamicAllocation.enabled": true,
						"spark.dynamicAllocation.minExecutors": 2,
						"spark.dynamicAllocation.maxExecutors": 2
					},
					"driverSize": "Small",
					"numExecutors": 2
				}
			},
			{
				"name": "SilverGoldNB",
				"type": "SynapseNotebook",
				"dependsOn": [
					{
						"activity": "BronzeSilverNB",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebook": {
						"referenceName": "Silver_To_Gold",
						"type": "NotebookReference"
					},
					"snapshot": true,
					"sparkPool": {
						"referenceName": "finmignspark",
						"type": "BigDataPoolReference"
					},
					"executorSize": "Small",
					"conf": {
						"spark.dynamicAllocation.enabled": true,
						"spark.dynamicAllocation.minExecutors": 2,
						"spark.dynamicAllocation.maxExecutors": 2
					},
					"driverSize": "Small",
					"numExecutors": 2
				}
			},
			{
				"name": "SuccessAlert",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "SilverGoldNB",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "POST",
					"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/31fb26d9f22f47b0b6a52f9e2301a8cb/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=-c8ukoQeyI10zKrjwwHs4DI6IYiRttdTV0AUDb-Hb5E",
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"body": {
						"value": "{\n\t\"to\": \"@(pipeline().parameters.to)\",\n\t\"subject\": \"@(pipeline().parameters.subjectSuccess)\",\n\t\"email\": \"@(pipeline().parameters.bodySuccess)\"\n\t\n}",
						"type": "Expression"
					}
				}
			},
			{
				"name": "FailAlert",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "SilverGoldNB",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "POST",
					"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/31fb26d9f22f47b0b6a52f9e2301a8cb/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=-c8ukoQeyI10zKrjwwHs4DI6IYiRttdTV0AUDb-Hb5E",
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"body": {
						"value": "{\n\t\"to\": \"@(pipeline().parameters.to)\",\n\t\"subject\": \"@(pipeline().parameters.subjectFailed)\",\n\t\"email\": \"@(pipeline().parameters.bodyFailed)\"\n\t\n}",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"to": {
				"type": "string",
				"defaultValue": "kunjarmurali@gmail.com"
			},
			"subjectSuccess": {
				"type": "string",
				"defaultValue": "Pipeline Execution Success"
			},
			"bodySuccess": {
				"type": "string",
				"defaultValue": "Pipeline Successfully Completed"
			},
			"subjectFailed": {
				"type": "string",
				"defaultValue": "Pipeline Execution Failed"
			},
			"bodyFailed": {
				"type": "string",
				"defaultValue": "Pipeline Failed Please check"
			}
		},
		"annotations": [],
		"lastPublishTime": "2025-02-02T12:09:46Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}